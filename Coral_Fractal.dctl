// Coral Fractal DCTL


#define MAX_RAY_STEPS 48
#define KIFS_ITERATIONS 16

#define SF  	0.2f
#define sp 		normalize(make_float3(1.0f, 1.0f, -1.0f))
#define COLOUR  make_float3(0.55f, 1.15f, 0.5f)
#define PI		3.1415926536f

typedef struct
{
float4 c0, c1, c2, c3; // columns
} mat4;

__DEVICE__ mat4 make_mat4(float4 A, float4 B, float4 C, float4 D)
{
mat4 E;
E.c0 = A;
E.c1 = B;
E.c2 = C;
E.c3 = D;
return E;
}

__DEVICE__ mat4 transpose(mat4 A)
{
mat4 E;
E.c0 = make_float4(A.c0.x, A.c1.x, A.c2.x, A.c3.x);
E.c1 = make_float4(A.c0.y, A.c1.y, A.c2.y, A.c3.y);
E.c2 = make_float4(A.c0.z, A.c1.z, A.c2.z, A.c3.z);
E.c3 = make_float4(A.c0.w, A.c1.w, A.c2.w, A.c3.w);
return E;
}

__DEVICE__ float3 abs(float3 A)
{
float3 B;
B.x = _fabs(A.x);
B.y = _fabs(A.y);
B.z = _fabs(A.z);
return B;
}

__DEVICE__ float3 add(float3 A, float B)
{
float3 C;
C.x = A.x + B;
C.y = A.y + B;
C.z = A.z + B;
return C;
}

__DEVICE__ float3 add(float3 A, float3 B)
{
float3 C;
C.x = A.x + B.x;
C.y = A.y + B.y;
C.z = A.z + B.z;
return C;
}

__DEVICE__ float3 add(float3 A, float3 B, float3 C)
{
float3 D;
D.x = A.x + B.x + C.x;
D.y = A.y + B.y + C.y;
D.z = A.z + B.z + C.z;
return D;
}

__DEVICE__ float3 add(float3 A, float3 B, float3 C, float3 D)
{
float3 E;
E.x = A.x + B.x + C.x + D.x;
E.y = A.y + B.y + C.y + D.y;
E.z = A.z + B.z + C.z + D.z;
return E;
}

__DEVICE__ float3 add(float3 A, float3 B, float3 C, float3 D, float3 E)
{
float3 F;
F.x = A.x + B.x + C.x + D.x + E.x;
F.y = A.y + B.y + C.y + D.y + E.y;
F.z = A.z + B.z + C.z + D.z + E.z;
return F;
}

__DEVICE__ float3 add(float3 A, float3 B, float3 C, float3 D, float3 E, float3 F)
{
float3 G;
G.x = A.x + B.x + C.x + D.x + E.x + F.x;
G.y = A.y + B.y + C.y + D.y + E.y + F.y;
G.z = A.z + B.z + C.z + D.z + E.z + F.z;
return G;
}

__DEVICE__ float3 divide(float3 A, float B)
{
float3 C;
C.x = A.x / B;
C.y = A.y / B;
C.z = A.z / B;
return C;
}

__DEVICE__ float fract(float A)
{
float B;
B = A - _floor(A);
return B;
}

__DEVICE__ float length(float2 A)
{
float B = _sqrtf(A.x * A.x + A.y * A.y);
return B;
}

__DEVICE__ float length(float3 A)
{
float B = _sqrtf(A.x * A.x + A.y * A.y + A.z * A.z);
return B;
}

__DEVICE__ float4 make_float4(float A)
{
return make_float4(A, A, A, A);
}

__DEVICE__ float4 make_float4(float A, float3 B)
{
return make_float4(A, B.x, B.y, B.z);
}

__DEVICE__ float4 make_float4(float3 A, float B)
{
return make_float4(A.x, A.y, A.z, B);
}

__DEVICE__ float3 minus(float3 A, float3 B)
{
float3 C;
C.x = A.x - B.x;
C.y = A.y - B.y;
C.z = A.z - B.z;
return C;
}

__DEVICE__ float3 mix(float3 A, float3 B, float C)
{
float3 D;
D.x = A.x * (1.0f - C) + B.x * C;
D.y = A.y * (1.0f - C) + B.y * C;
D.z = A.z * (1.0f - C) + B.z * C;
return D;
}

__DEVICE__ float3 multi(float A, float3 B)
{
float3 C;
C.x = A * B.x;
C.y = A * B.y;
C.z = A * B.z;
return C;
}

__DEVICE__ float3 multi(float3 A, float B)
{
float3 C;
C.x = A.x * B;
C.y = A.y * B;
C.z = A.z * B;
return C;
}

__DEVICE__ float4 multi(float4 A, float B)
{
float4 C;
C.x = A.x * B;
C.y = A.y * B;
C.z = A.z * B;
C.w = A.w * B;
return C;
}

__DEVICE__ float4 multi(mat4 N, float4 In)
{
float4 out;
out.x = N.c0.x * In.x + N.c0.y * In.y + N.c0.z * In.z + N.c0.w * In.w;
out.y = N.c1.x * In.x + N.c1.y * In.y + N.c1.z * In.z + N.c1.w * In.w;
out.z = N.c2.x * In.x + N.c2.y * In.y + N.c2.z * In.z + N.c2.w * In.w;
out.w = N.c3.x * In.x + N.c3.y * In.y + N.c3.z * In.z + N.c3.w * In.w;
return out;
}

__DEVICE__ float3 normalize(float3 A)
{
float3 B;
float C = _sqrtf((A.x * A.x) + (A.y * A.y) + (A.z * A.z));
B.x = A.x / C;
B.y = A.y / C;
B.z = A.z / C;
return B;
}

__DEVICE__ float radians(float A)
{
return (A * PI / 180.0f);
}

__DEVICE__ float step(float A, float B)
{
float C;
C = B < A ? 0.0f : 1.0f;
return C;
}

__DEVICE__ mat4 calc_transform(float3 offset, float3 axis, float angle, float scale)
{
angle *= radians(1.0f);
float c = _cosf(angle);
float s = _sinf(angle);
float3 t = multi(1.0f - c, axis);

return make_mat4(multi(make_float4(c + t.x * axis.x, t.y * axis.x - s * axis.z, t.z * axis.x + s * axis.y, 0.0f), scale),
multi(make_float4(t.x * axis.y + s * axis.z, (c + t.y * axis.y), t.z * axis.y - s * axis.x, 0.0f), scale),
multi(make_float4(t.x * axis.z - s * axis.y, t.y * axis.z + s * axis.x, c + t.z * axis.z, 0.0f), scale),
make_float4(offset, 1.0f));
}

__DEVICE__ mat4 M;

__DEVICE__ float KIFS(float3 p, float s)
{
p = divide(p, s);
for(int i = 0; i < KIFS_ITERATIONS; i++)
{	
p = abs(p);	
float4 yo = multi(M, make_float4(p, 1.0f));
p = make_float3(yo.x, yo.y, yo.z);                             
}
return ((length(p) - 1.0f) * (_powf(1.5f, -(float)KIFS_ITERATIONS))) * s;
}

__DEVICE__ void combineKIFS(float3 p, float s, float3 c, float4 *o)
{
float d = KIFS(p, s);
if(d < o->x) *o = make_float4(d, c);
}

__DEVICE__ float4 scene(float3 p)
{
float3 p2 = minus(p, add(sp, multi(sp, SF)));
float3 p3 = minus(p, add(sp, multi(sp, SF*2.0f), multi(sp, SF*SF)));
float3 p4 = minus(p, add(sp, multi(sp, SF*2.0f), multi(sp, SF*SF*2.0f), multi(sp, SF*SF*SF)));
float3 p5 = minus(p, add(sp, multi(sp, SF*2.0f), multi(sp, SF*SF*2.0f), multi(sp, SF*SF*SF*2.0f), multi(sp, SF*SF*SF*SF)));
float3 p6 = minus(p, add(sp, multi(sp, SF*2.0f), multi(sp, SF*SF*2.0f), multi(sp, SF*SF*SF*2.0f), multi(sp, SF*SF*SF*SF*2.0f), multi(sp, SF*SF*SF*SF*SF)));

float4 o = make_float4(10000.0f, 0.0f, 0.0f, 0.0f);

combineKIFS(p, 1.0f, COLOUR, &o);
combineKIFS(p2, SF, COLOUR, &o);
combineKIFS(p3, SF*SF, COLOUR, &o);
combineKIFS(p4, SF*SF*SF, COLOUR, &o);
combineKIFS(p5, SF*SF*SF*SF, COLOUR, &o);

return o;       
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB)
{
//float iTime = _tex2D(p_TexR, 500, 500) / 24;
float iTime = _tex2D(p_TexR, 500, 500) * 10;

M = calc_transform(make_float3(-0.4f, -0.4f, -0.55f), normalize(make_float3(1.0f, 1.0f, 1.0f)), 40.0f, 1.5f);
M = transpose(M);

float X = (float)p_X;
float Y = (float)(p_Height - p_Y);
float2 XY = make_float2(X, Y);
float2 resolution = make_float2((float)p_Width, (float)p_Height);

float2 uv;
uv.x = (X / resolution.x) * 2.0f - 1.0f;
uv.y = (Y / resolution.y) * 2.0f - 1.0f;
float3 dir = normalize(make_float3(uv.x, uv.y * (resolution.y/resolution.x), 0.665f));

float t = _logf(1.0f + 3.0 * fract(iTime / 3.0f)) / _logf(4.0f);
float3 t1 = add(sp, multi(sp, SF*2.0f), multi(sp, SF*SF), make_float3(-0.05f, -0.05f, -SF));
float3 t2 = add(sp, multi(sp, SF*2.0f), multi(sp, SF*SF*2.0f), multi(sp, SF*SF*SF), make_float3(-0.05*SF, -0.05*SF, -SF*SF));
float3 cam = add(t1, multi(minus(t2, t1), t));
float d = 1.0f;
float ray_length = 0.0f;
int steps = 0;
float3 bg = multi(make_float3(0.0f, 0.55, 1.0f), (_powf(length(make_float2(uv.x, uv.y * 2.0f)), 0.5f) - 1.05f));
float3 c = bg;
float4 s = make_float4(0.0f);
float lod = 0.56f /_fmaxf(resolution.x, resolution.y);

for(int i=0; i < MAX_RAY_STEPS; i++) {
if(d < lod * ray_length) continue;
s = scene(cam);
d = s.x;
cam = add(cam, multi(d, dir));
ray_length += d;
steps++;
}

if(ray_length < 1.0f) {
c = make_float3(s.y, s.z, s.w);
float cost = (float)steps / (float)MAX_RAY_STEPS;
c = multi(c, _powf(_fmaxf(0.0f, 1.0f - cost),5.0f));
c = add(c, _powf(_fmaxf(0.0f, 1.0f - cost), 27.0f));
if(uv.y > 0.1f) c = mix(c, bg, cost * step(0.5f, cost));
}

return c;
}