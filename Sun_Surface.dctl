// Sun Surface DCTL

__DEVICE__ float2 add(float2 A, float B)
{
float2 C;
C.x = A.x + B;
C.y = A.y + B;
return C;
}

__DEVICE__ float2 add(float2 A, float2 B)
{
float2 C;
C.x = A.x + B.x;
C.y = A.y + B.y;
return C;
}

__DEVICE__ float3 add(float3 A, float B)
{
float3 C;
C.x = A.x + B;
C.y = A.y + B;
C.z = A.z + B;
return C;
}

__DEVICE__ float3 add(float3 A, float3 B)
{
float3 C;
C.x = A.x + B.x;
C.y = A.y + B.y;
C.z = A.z + B.z;
return C;
}

__DEVICE__ float dot(float2 A, float2 B)
{
float C = A.x * B.x + A.y * B.y;
return C;
}

__DEVICE__ float3 floor(float3 A)
{
float3 B;
B.x = _floor(A.x);
B.y = _floor(A.y);
B.z = _floor(A.z);
return B;
}

__DEVICE__ float fract(float A)
{
float B;
B = A - _floor(A);
return B;
}

__DEVICE__ float3 fract(float3 A)
{
float3 B;
B.x = A.x - _floor(A.x);
B.y = A.y - _floor(A.y);
B.z = A.z - _floor(A.z);
return B;
}

__DEVICE__ float length(float2 A)
{
float B = _sqrtf(A.x * A.x + A.y * A.y);
return B;
}

__DEVICE__ float3 minus(float A, float3 B)
{
float3 C;
C.x = A - B.x;
C.y = A - B.y;
C.z = A - B.z;
return C;
}

__DEVICE__ float mix(float A, float B, float C)
{
float D = A * (1.0f - C) + B * C;
return D;
}

__DEVICE__ float2 multi(float A, float2 B)
{
float2 C;
C.x = A * B.x;
C.y = A * B.y;
return C;
}

__DEVICE__ float2 multi(float2 A, float B)
{
float2 C;
C.x = A.x * B;
C.y = A.y * B;
return C;
}

__DEVICE__ float2 multi(float2 A, float2 B)
{
float2 C;
C.x = A.x * B.x;
C.y = A.y * B.y;
return C;
}

__DEVICE__ float3 multi(float A, float3 B)
{
float3 C;
C.x = A * B.x;
C.y = A * B.y;
C.z = A * B.z;
return C;
}

__DEVICE__ float3 multi(float3 A, float B)
{
float3 C;
C.x = A.x * B;
C.y = A.y * B;
C.z = A.z * B;
return C;
}

__DEVICE__ float3 multi(float3 A, float3 B)
{
float3 C;
C.x = A.x * B.x;
C.y = A.y * B.y;
C.z = A.z * B.z;
return C;
}

__DEVICE__ float3 normalize(float3 A)
{
float3 B;
float C = _sqrtf((A.x * A.x) + (A.y * A.y) + (A.z * A.z));
B.x = A.x / C;
B.y = A.y / C;
B.z = A.z / C;
return B;
}

__DEVICE__ float step(float A, float B)
{
float C;
C = B < A ? 0.0f : 1.0f;
return C;
}

//#define ULTRAVIOLET
#define DITHERING

#define pi 3.14159265f
//#define R(p, a) p =_cosf(a) * p + _sinf(a) * make_float2(p.y, -p.x)

// IQ's noise
__DEVICE__ float pn(float3 p, __TEXTURE__ texG, __TEXTURE__ texB, float2 resolution)
{
float3 ip = floor(p);
p = fract(p);
p = multi(p, multi(p, minus(3.0f, multi(2.0f, p))));
float2 uv = add(add(make_float2(ip.x, ip.y), multi(make_float2(37.0f, 17.0f), ip.z)), make_float2(p.x, p.y));

//uv = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;
float2 UV = multi(multi(add(uv, 0.5f), 1.0f/256.0f), resolution);
//UV = multi(UV, 0.1f);

uv.x = _tex2D(texB, (int)UV.x, (int)UV.y);
uv.y = _tex2D(texG, (int)UV.x, (int)UV.y);
return mix( uv.x, uv.y, p.z );
}

// FBM
__DEVICE__ float fpn(float3 p, __TEXTURE__ texG, __TEXTURE__ texB, float2 resolution)
{
return pn(multi(p, 0.06125f), texG, texB, resolution) * 0.57f + pn(multi(p, 0.125f), texG, texB, resolution) * 0.28f + pn(multi(p, 0.25f), texG, texB, resolution) * 0.15f;
}

__DEVICE__ float rand(float2 co)
{
return fract(_sinf(dot(multi(co, 0.123f), make_float2(12.9898f, 78.233f))) * 43758.5453f);
}

__DEVICE__ float cosNoise(float2 p)
{
return 0.5f * (_sinf(p.x) + _sinf(p.y));
}

__DEVICE__ float sdTorus( float3 p, float2 t )
{
//return length( vec2(length(p.xz)-t.x*1.2,p.y) )-t.y;
return length(make_float2(length(make_float2(p.x, p.z)) - t.x * 1.2f, p.y) ) - t.y;
}

__DEVICE__ float smin( float a, float b, float k )
{
float h = _saturatef( 0.5f + 0.5f * (b - a) / k);
return mix( b, a, h ) - k * h * (1.0f - h);
}

__DEVICE__ float SunSurface( float3 pos, float iTime )
{
float h = 0.0f;
float2 q = multi(make_float2(pos.x, pos.z), 0.5f);

float s = 0.5f;

float d2 = 0.0f;

float4 m2 = make_float4(1.6f, 1.2f, -1.2f, 1.6f);

for( int i=0; i<6; i++ )
{
h += s * cosNoise( q );

//q = m2 * q * 0.85f; 

q = make_float2(q.x * m2.x + q.y * m2.y, q.x * m2.z + q.y * m2.w);
q = multi(q, 0.85f);
q = add(q, make_float2(2.41f, 8.13f));
s *= 0.48f + 0.2f * h;
}
h *= 2.0f;

float d1 = pos.y - h;

// rings
float3 r1;
r1.x = _fmod(2.3f + pos.x + 1.0f, 10.0f) - 5.0f;
r1.y = _fmod(2.3f + pos.y + 1.0f, 10.0f) - 5.0f;
r1.z = _fmod(2.3f + pos.z + 1.0f, 10.0f) - 5.0f;
r1.y = pos.y - 0.1f - 0.7f * h + 0.5f * _sinf( 3.0f * iTime + pos.x + 3.0f * pos.z);
float c = _cosf(pos.x);
float s1 = 1.0f; //sin(pos.x);

//r1.xz = c * r1.xz + s1 * make_float2(r1.z, -r1.x);

float2 XZ = add(multi(c, make_float2(r1.x, r1.z)), multi(s1, make_float2(r1.z, -r1.x)));
d2 = sdTorus( make_float3(XZ.x, XZ.y, r1.y), make_float2(_clampf(_fabs(pos.x/pos.z), 0.7f, 2.5f), 0.20f) );

return smin( d1, d2, 1.0f );
}

__DEVICE__ float map(float3 p, float iTime, __TEXTURE__ texG, __TEXTURE__ texB, float2 resolution)
{
//p.z += 1.;
//R(p.yz, -25.5);// -1.0+iMouse.y*0.003);
//R(p.xz, iMouse.x*0.008*pi+iTime*0.1);
//return SunSurface(p) +  fpn(p*50.+iTime*25.) * 0.45;

p.z += 1.0f;

float2 iMouse = make_float2(1.0f, 0.0f);

//#define R(p, a) p =_cosf(a) * p + _sinf(a) * make_float2(p.y, -p.x)

float py = _cosf(-25.5f) * p.y + _sinf(-25.5f) * p.z;
float pz = _cosf(-25.5f) * p.z + _sinf(-25.5f) * -p.y;
p = make_float3(p.x, py, pz);

//R(p.yz, -25.5);// -1.0+iMouse.y*0.003);

float move = iMouse.x * 0.008f * pi + iTime * 0.1f;

//R(p.xz, iMouse.x * 0.008f * pi + iTime * 0.1f);

float px = _cosf(move) * p.x + _sinf(move) * p.z;
pz = _cosf(move) * p.z + _sinf(move) * -p.x;
p = make_float3(px, p.y, pz);

return SunSurface(p, iTime) +  fpn(add(multi(p, 50.f), iTime * 25.0f), texG, texB, resolution) * 0.45f;
}

__DEVICE__ float3 firePalette(float i)
{
float T = 1400.0f + 1300.0f * i; // Temperature range (in Kelvin).

float3 L = make_float3(7.4f, 5.6f, 4.4f); // Red, green, blue wavelengths (in hundreds of nanometers).

//L = pow(L, float3(5.0f)) * (_expf(1.43876719683e5 / (T * L)) - 1.0f);

L.x = _powf(L.x, 5.0f) * (_expf(1.43876719683e5 / (T * L.x)) - 1.0f);
L.y = _powf(L.y, 5.0f) * (_expf(1.43876719683e5 / (T * L.y)) - 1.0f);
L.z = _powf(L.z, 5.0f) * (_expf(1.43876719683e5 / (T * L.z)) - 1.0f);

// Exposure level. Set to "50." For "70," change the "5" to a "7," etc.

return make_float3(1.0f - _expf(-5e8 / L.x), 1.0f - _expf(-5e8 / L.y), 1.0f - _expf(-5e8 / L.z));
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB)
{  
// p: position on the ray
// rd: direction of the ray

//float3 rd = normalize(make_float3((gl_FragCoord.xy-0.5*iResolution.xy)/iResolution.y, 1.));

p_Y = p_Height - p_Y;

float X = (float)p_X;
float Y = (float)p_Y;

float iTime = _tex2D(p_TexR, 500, 500) * 10.0f;
//float iTime = _tex2D(p_TexR, 500, 500) * 0.001f;

float2 resolution = make_float2((float)p_Width, (float)p_Height);

float rdx = (X - (0.5f * resolution.x)) / resolution.y;
float rdy = (Y - (0.5f * resolution.y)) / resolution.y;
float3 rd = normalize(make_float3(rdx, rdy, 1.0f));

float3 ro = make_float3(0.0f, 0.0f, -22.0f);

// ld, td: local, total density 
// w: weighting factor
float ld = 0.0f,
td = 0.0f,
w = 0.0f;

// t: length of the ray
// d: distance function
float d = 1.0f, 
t = 1.0f;

// Distance threshold.
const float h = 0.1f;

// total color
float3 tc = make_float3(0.0f, 0.0f, 0.0f);

#ifdef DITHERING

float2 pos = make_float2(X / resolution.x, Y / resolution.y);
float2 seed = add(pos, fract(iTime));
//t=(1.0f + 0.2f * rand(seed));

#endif

for (int i=0; i<56; i++) {

if(td > (1.0f - 1.0f / 80.0f) || d < 0.001f * t || t > 40.0f) break;

d = map(add(ro, multi(t, rd)), iTime, p_TexG, p_TexB, resolution); 

// fix some holes deep inside
//d = _fmaxf(d, -0.3f);

ld = (h - d) * step(d, h);
w = (1.0f - td) * ld;   

tc = add(tc, w * w + 1.0f / 50.0f);
td += w + 1.0f / 200.0f;

#ifdef DITHERING  
#ifdef ULTRAVIOLET

d = _fmaxf(d, 0.04f);
d = _fabs(d) * (1.0f + 0.28f * rand(multi(seed, make_float2(i, i))));
#else

d = _fabs(d) * (0.8f + 0.28f * rand(multi(seed, make_float2(i, i))));
d = _fmaxf(d, 0.04f);

#endif 
#else

d = _fmaxf(d, 0.04f);
#endif

t += d * 0.5f;
}

tc = firePalette(tc.x);

#ifdef ULTRAVIOLET
tc = multi(tc, 1.0f / _expf( ld * 2.82f ) * 1.05f);
#endif

return make_float3(tc.x, tc.y, tc.z);
}