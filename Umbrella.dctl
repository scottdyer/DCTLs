// Umbrella DCTL

__DEVICE__ float dot(float2 A, float2 B)
{
float C = A.x * B.x + A.y * B.y;
return C;
}

__DEVICE__ float length(float2 A)
{
float B = _sqrtf(A.x * A.x + A.y * A.y);
return B;
}

__DEVICE__ float4 make_float4(float3 A, float B)
{
float4 C = make_float4(A.x, A.y, A.z, B);
return C;
}

__DEVICE__ float2 minus(float2 A, float2 B)
{
float2 C;
C.x = A.x - B.x;
C.y = A.y - B.y;
return C;
}

__DEVICE__ float3 mix(float3 A, float3 B, float C)
{
float3 D;
D.x = A.x * (1.0f - C) + B.x * C;
D.y = A.y * (1.0f - C) + B.y * C;
D.z = A.z * (1.0f - C) + B.z * C;
return D;
}

__DEVICE__ float4 mix(float4 A, float4 B, float C)
{
float4 D;
D.x = A.x * (1.0f - C) + B.x * C;
D.y = A.y * (1.0f - C) + B.y * C;
D.z = A.z * (1.0f - C) + B.z * C;
D.w = A.w * (1.0f - C) + B.w * C;
return D;
}

__DEVICE__ float2 multi(float2 A, float B)
{
float2 C;
C.x = A.x * B;
C.y = A.y * B;
return C;
}

__DEVICE__ float3 multi(float3 A, float B)
{
float3 C;
C.x = A.x * B;
C.y = A.y * B;
C.z = A.z * B;
return C;
}

__DEVICE__ float smoothstep(float edge0, float edge1, float x)
{
float t = _saturatef((x - edge0) / (edge1 - edge0));
return t * t * (3.0f - 2.0f * t);
}

__DEVICE__ float sdfCircle(float2 center, float radius, float2 coord )
{
float2 offset = minus(coord, center);

return _sqrtf((offset.x * offset.x) + (offset.y * offset.y)) - radius;
}

__DEVICE__ float sdfEllipse(float2 center, float a, float b, float2 coord)
{
float a2 = a * a;
float b2 = b * b;
return (b2 * (coord.x - center.x) * (coord.x - center.x) + 
a2 * (coord.y - center.y) * (coord.y - center.y) - a2 * b2)/(a2 * b2);
}

__DEVICE__ float sdfLine(float2 p0, float2 p1, float width, float2 coord)
{
float2 dir0 = minus(p1, p0);
float2 dir1 = minus(coord, p0);
float h = _saturatef(dot(dir0, dir1)/dot(dir0, dir0));
return (length(minus(dir1, multi(dir0, h))) - width * 0.5f);
}

__DEVICE__ float sdfUnion( const float a, const float b )
{
return _fminf(a, b);
}

__DEVICE__ float sdfDifference( const float a, const float b)
{
return _fmaxf(a, -b);
}

__DEVICE__ float sdfIntersection( const float a, const float b )
{
return _fmaxf(a, b);
}

__DEVICE__ float4 render(float d, float3 color, float stroke)
{
//stroke = fwidth(d) * 2.0;
float anti = length(make_float2(d, d)) * 0.5f; //fwidth(d) * 1.0;
float4 strokeLayer = make_float4(0.05f, 0.05f, 0.05f, 1.0f - smoothstep(-anti, anti, d - stroke));
float4 colorLayer = make_float4(color.x, color.y, color.z, 1.0f - smoothstep(-anti, anti, d));

if (stroke < 0.000001f) {
return colorLayer;
}
return make_float4(mix(make_float3(strokeLayer.x, strokeLayer.y, strokeLayer.z), make_float3(colorLayer.x, colorLayer.y, colorLayer.z), colorLayer.w), strokeLayer.w);
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB)
{

//float iTime = _tex2D(p_TexR, 500, 500) / 24.0f;
float iTime = _tex2D(p_TexR, 500, 500) * 100.0f;
float X = (float)p_X;
float Y = (float)(p_Height - p_Y);
float2 resolution = make_float2((float)p_Width, (float)p_Height);

float size = _fminf(resolution.x, resolution.y);
float pixSize = 1.0f / size;
float2 uv = make_float2(X / resolution.x, Y / resolution.x);
float stroke = pixSize * 1.5f;
float2 center = make_float2(0.5f, 0.5f * resolution.y/resolution.x);

float a = sdfEllipse(make_float2(0.5f, center.y * 2.0f - 0.34f), 0.25f, 0.25f, uv);
float b = sdfEllipse(make_float2(0.5f, center.y * 2.0f + 0.03f), 0.8f, 0.35f, uv);
b = sdfIntersection(a, b);
//float4 layer1 = render(b, make_float3(0.32f, 0.56f, 0.53f), fwidth(b) * 2.0);
float4 layer1 = render(b, make_float3(0.32f, 0.56f, 0.53f), length(make_float2(b, b)) * 0.01f);

// Draw strips
float4 layer2 = layer1;
float t, r0, r1, r2, e, f;
float2 sinuv = make_float2(uv.x, (_sinf(uv.x * 40.0f) * 0.02f + 1.0f) * uv.y);
for (float i = 0.0f; i < 10.0f; i++) {
t = _fmod(iTime + 0.3f * i, 3.0f) * 0.2f;
r0 = (t - 0.15f) / 0.2f * 0.9f + 0.1f;
r1 = (t - 0.15f) / 0.2f * 0.1f + 0.9f;
r2 = (t - 0.15f) / 0.2f * 0.15f + 0.85f;
e = sdfEllipse(make_float2(0.5f, center.y * 2.0f + 0.37f - t * r2), 0.7f * r0, 0.35f * r1, sinuv);
f = sdfEllipse(make_float2(0.5f, center.y * 2.0f + 0.41f - t), 0.7f * r0, 0.35f * r1, sinuv);
f = sdfDifference(e, f);
f = sdfIntersection(f, b);
float4 layer = render(f, make_float3(1.0f, 0.81f, 0.27f), 0.0f);
layer2 = mix(layer2, layer, layer.w);
}

// Draw the handle
float bottom = 0.08f;
float handleWidth = 0.01f;
float handleRadius = 0.04f;
float d = sdfCircle(make_float2(0.5f - handleRadius + 0.5f * handleWidth, bottom), handleRadius, uv);
float c = sdfCircle(make_float2(0.5f - handleRadius + 0.5f * handleWidth, bottom), handleRadius - handleWidth, uv);
d = sdfDifference(d, c);
c = uv.y - bottom;
d = sdfIntersection(d, c);
c = sdfLine(make_float2(0.5f, center.y * 2.0f - 0.05f), make_float2(0.5f, bottom), handleWidth, uv);
d = sdfUnion(d, c);
c = sdfCircle(make_float2(0.5f, center.y * 2.0f - 0.05f), 0.01f, uv);
d = sdfUnion(c, d);
c = sdfCircle(make_float2(0.5f - handleRadius * 2.0f + handleWidth, bottom), handleWidth * 0.5f, uv);
d = sdfUnion(c, d);
float4 layer0 = render(d, make_float3(0.404f, 0.298f, 0.278f), stroke);

float2 p;
p.x = (2.0f * X - resolution.x) / _fminf(resolution.y, resolution.x);
p.y = (2.0f * Y - resolution.y) / _fminf(resolution.y, resolution.x);
float3 col = multi(make_float3(1.0f, 0.8f, 0.7f - 0.07f * p.y), 1.0f - 0.25f * length(p));
col = mix(col, make_float3(layer0.x, layer0.y, layer0.z), layer0.w);
col = mix(col, make_float3(layer1.x, layer1.y, layer1.z), layer1.w);
col = mix(col, make_float3(layer2.x, layer2.y, layer2.z), layer2.w);
col.x = _powf(col.x, 1.0f/2.2f);
col.y = _powf(col.y, 1.0f/2.2f);
col.z = _powf(col.z, 1.0f/2.2f);

return col;
}